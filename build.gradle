plugins {
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'scala'
  id 'java-library'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.8.5'
  id 'com.gradle.plugin-publish' version '0.12.0'
}

group = 'org.podval.tools'
version = '0.1.4'
description = 'Deploy Service to Google Cloud Run'

final String gitHubRepository = "dubinsky/cloud-run"
final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
final String orgName = 'Podval Group'
final String orgUrl = 'http://www.podval.org'
final List<String> projectTags = ['Gradle', 'Google', 'CloudRun', 'JIB']

repositories {
  jcenter()
  mavenCentral()
  mavenLocal()
  gradlePluginPortal() // for JIB
}

dependencies {
  implementation 'org.scala-lang:scala-library:2.13.4'
  implementation 'com.google.auth:google-auth-library-oauth2-http:0.23.0'
  implementation 'com.google.api-client:google-api-client:1.31.2'
  implementation 'com.google.apis:google-api-services-run:v1-rev20201113-1.31.0'
  implementation 'org.slf4j:slf4j-api:1.7.30'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1'

  compileOnly    'gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.7.1'

  // by default, -android version gets dragged in and breaks JIB - I get
  //   java.lang.NoSuchMethodError
  //   com.google.common.collect.ImmutableList.toImmutableList()Ljava/util/stream/Collector;
  implementation 'com.google.guava:guava:30.1-jre'
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.with {
    targetCompatibility = '1.8'
  }
}

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')

jar {
  manifest {
    attributes(
      'Implementation-Title'  : project.description,
      'Implementation-Version': project.version
    )
  }
}

// Gradle plugin [publishing?] plugin, if it is applied, adds tasks publishPluginJar
// and publishPluginJavaDocsJar that create sources and javadoc archives;
// attempts to use them as artifacts in the Maven publication failed, so I make my own.
task sourceJar(type: Jar) {
  from sourceSets.main.allSource
  archiveClassifier.set('sources')
}

publishing {
  publications {
    bintrayMavenPublication(MavenPublication) {
      groupId    project.group
      artifactId project.name
      version    project.version

      from components.java

      artifact sourceJar

      pom {
        name = project.name
        description = project.description
        url = gitHubRepositoryUrl
        scm {
          url = gitHubRepositoryUrl
          connection = "scm:git:git://github.com/${gitHubRepository}.git"
          developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
            comments = 'A business-friendly OSS license'
          }
        }
        organization {
          name = orgName
          url = orgUrl
        }
        developers {
          developer {
            id = 'dub'
            name = 'Leonid Dubinsky'
            email = 'dub@podval.org'
            url = 'http://dub.podval.org'
            organization = orgName
            organizationUrl = orgUrl
            timezone = '-5'
          }
        }
      }
    }
  }
}

bintray {
  user         = 'dubinsky'
  key          = findProperty('bintrayApiKey') ?: System.getenv('bintrayApiKey')
  publications = ['bintrayMavenPublication']
  dryRun       = false
  publish      = true
  override     = true
  pkg {
    repo                  = 'org.podval'
    name                  = project.name
    desc                  = project.description
    websiteUrl            = gitHubRepositoryUrl
    issueTrackerUrl       = "${gitHubRepositoryUrl}/issues"
    vcsUrl                = "${gitHubRepositoryUrl}.git"
    githubRepo            = gitHubRepository
    licenses              = ['Apache-2.0']
    labels                = projectTags
    publicDownloadNumbers = true
    githubReleaseNotesFile= 'CHANGELOG.md'
    version { name        = project.version }
  }
}

gradlePlugin {
  plugins {
    cloudRunPlugin {
      id = project.name
      implementationClass = 'org.podval.tools.cloudrun.CloudRunPlugin'
    }
  }
}

pluginBundle {
  website = gitHubRepositoryUrl
  vcsUrl  = gitHubRepositoryUrl //.git' ?

  plugins {
    cloudRunPlugin {
      displayName = project.description
      description = project.description
      tags        = projectTags
    }
  }

  // If you have an existing plugin deployed to Bintray and would like to keep
  // your existing group ID and artifact ID for continuity, you can specify
  // them here (needs manual approval on first publication).
  mavenCoordinates {
    groupId    = project.group
    artifactId = project.name
  }
}

task upload
upload.description('Upload artifacts and plugins')
upload.group('publishing')

upload.dependsOn(bintrayUpload)
upload.dependsOn(publishPlugins)
