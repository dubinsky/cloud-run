plugins {
  id 'com.github.ben-manes.versions' version '0.44.0'
  id 'scala'
  id 'java-library'
  id 'signing'
  id 'com.gradle.plugin-publish' version '1.2.1'
}

description = 'Deploy Service to Google Cloud Run'
group = 'org.podval.tools'
version = '0.4.0'

final String gitHubRepository = "dubinsky/cloud-run"
final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
final String orgName = 'Podval Group'
final String orgUrl = 'https://www.podval.org'

dependencies {
  implementation 'org.scala-lang:scala3-library_3:3.3.1'

  // Note: 1.19.0 brings in guava 32, for which JIB plugin 3.3.2 is not ready - but 3.3.3 will be
  implementation 'com.google.auth:google-auth-library-oauth2-http:1.22.0'
  // by default, -android version gets dragged in and breaks JIB - I get java.lang.NoSuchMethodError
  //   com.google.common.collect.ImmutableList.toImmutableList()Ljava/util/stream/Collector;
  //  implementation 'com.google.guava:guava:31.1-jre'

  implementation 'com.google.api-client:google-api-client:2.3.0'

  // see https://cloud.google.com/run/docs/reference/about-apis -
  // I am making API calls, but I rely on Kubernetes compatibility, so I am staying with v1.
  implementation 'com.google.apis:google-api-services-run:v1-rev20240128-2.0.0'

  implementation 'org.slf4j:slf4j-api:2.0.11'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.16.1'

  compileOnly    'gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:3.2.1'
}

tasks.withType(ScalaCompile).configureEach {
  scalaCompileOptions.with {
    targetCompatibility = '' // TODO remove when https://youtrack.jetbrains.com/issue/SCL-18813 is fixed
    additionalParameters = [
            '-new-syntax',
            '-feature',
            '-language:strictEquality',
            '-source:future',
            //'-deprecation',
            //'-unchecked',
            //'-Xsemanticdb',
            //'-Ysafe-init',
            //'-explain',
    ]
  }
}

jar {
  manifest {
    attributes(
      'Implementation-Title'  : project.description,
      'Implementation-Version': project.version
    )
  }
}

tasks.register('sourcesJar', Jar) {
  from sourceSets.main.allSource
  archiveClassifier.set('sources')
}

tasks.register('scaladocJar', Jar) {
  from scaladoc.destinationDir
  archiveClassifier.set('scaladoc')
}
scaladocJar.dependsOn scaladoc

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')
// but Maven Central requires javadoc JAR...
tasks.register('javadocJar', Jar) {
  from javadoc.destinationDir
  archiveClassifier.set('javadoc')
}
javadocJar.dependsOn(javadoc)

publishing {
  repositories {
    maven {
      name = 'mavenCentral'
      url = version.endsWith('SNAPSHOT') ?
        'https://oss.sonatype.org/content/repositories/snapshots' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2'

      // Note: this will use mavenCentralUsername and mavenCentralPassword properties - if they are available
      credentials(PasswordCredentials)
    }
  }

  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact scaladocJar
      artifact javadocJar

      pom {
        name = project.name
        description = project.description
        url = gitHubRepositoryUrl
        scm {
          url = gitHubRepositoryUrl
          connection = "scm:git:git://github.com/${gitHubRepository}.git"
          developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
            comments = 'A business-friendly OSS license'
          }
        }
        organization {
          name = orgName
          url = orgUrl
        }
        developers {
          developer {
            id = 'dub'
            name = 'Leonid Dubinsky'
            email = 'dub@podval.org'
            url = 'https://dub.podval.org'
            organization = orgName
            organizationUrl = orgUrl
            timezone = '-5'
          }
        }
      }
    }
  }
}

signing {
  useInMemoryPgpKeys(
    findProperty('gnupg.dub-podval-org.key'),
    findProperty('gnupg.dub-podval-org.password')
  )
  sign publishing.publications.library
}

gradlePlugin {
  website = gitHubRepositoryUrl
  vcsUrl  = gitHubRepositoryUrl //.git' ?
  plugins {
    cloudRun {
      id = project.name
      implementationClass = 'org.podval.tools.cloudrun.CloudRunPlugin'
      displayName = project.description
      description = project.description
      tags.set(['Google', 'CloudRun', 'JIB', 'Docker'])
    }
  }
}

tasks.register('uploadLibrary')
uploadLibrary.description('Upload artifacts')
uploadLibrary.group('publishing')
uploadLibrary.dependsOn(publishLibraryPublicationToMavenCentralRepository)

tasks.register('upload')
upload.description('Upload artifacts and plugins')
upload.group('publishing')
upload.dependsOn(uploadLibrary)
upload.dependsOn(publishPlugins)
